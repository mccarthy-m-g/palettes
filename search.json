[{"path":"https://mccarthy-m-g.github.io/palettes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Michael McCarthy Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/biscale.html","id":"custom-palettes","dir":"Articles","previous_headings":"","what":"Custom palettes","title":"Using palettes with biscale","text":"Colour vectors naturally compatible biscale, two important differences: Colour vectors must named Colours vector must specified hexadecimal strings form “#rrggbb” name colour used specify location bivariate scale. Names can also added unnamed colour vectors names(): preview bivariate palette use biscale::bi_pal():","code":"named_colour_vector <- pal_colour(c(   \"1-1\" = \"#d3d3d3\", # low x, low y   \"2-1\" = \"#9e3547\", # high x, low y   \"1-2\" = \"#4279b0\", # low x, high y   \"2-2\" = \"#311e3b\"  # high x, high y ))  named_colour_vector #> <palettes_colour[4]> #> • #D3D3D3 #> • #9E3547 #> • #4279B0 #> • #311E3B  names(named_colour_vector) #> [1] \"1-1\" \"2-1\" \"1-2\" \"2-2\" unnamed_colour_vector <- pal_colour(   c(\"#d3d3d3\", \"#9e3547\", \"#4279b0\", \"#311e3b\") )  names(unnamed_colour_vector) #> NULL  names(unnamed_colour_vector) <- c(\"1-1\", \"2-1\", \"1-2\", \"2-2\")  names(unnamed_colour_vector) #> [1] \"1-1\" \"2-1\" \"1-2\" \"2-2\" bi_pal(named_colour_vector, dim = 2)"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/biscale.html","id":"creating-maps","dir":"Articles","previous_headings":"","what":"Creating maps","title":"Using palettes with biscale","text":"create maps colour vectors colour palettes, can follow general workflow covered Get started article biscale. article demonstrates create bivariate scales using race income data U.S. Census tracts City St. Louis Missouri. recreate map using custom colour vector. begin mapping race (percentage white residents) median income values bivariate scale biscale::bi_class(): create named colour vector. colours previous example using three--three bivariate map instead two--two map. bivariate legend used biscale actually ggplot2 plot, create map legend separately, combine . combine map legend using patchwork::inset_element():","code":"race_income <- bi_class(   stl_race_income,   x = pctWhite,   y = medInc,   dim = 3,   style = \"quantile\",   keep_factors = TRUE ) named_colour_vector <- pal_colour(c(   \"1-1\" = \"#d3d3d3\", # low x, low y   \"2-1\" = \"#ba8890\",   \"3-1\" = \"#9e3547\", # high x, low y   \"1-2\" = \"#8aa6c2\",   \"2-2\" = \"#7a6b84\", # medium x, medium y   \"3-2\" = \"#682a41\",   \"1-3\" = \"#4279b0\", # low x, high y   \"2-3\" = \"#3a4e78\",   \"3-3\" = \"#311e3b\" # high x, high y )) # Draw map with a bivariate fill scale race_income_plot <- ggplot(race_income, aes(fill = bi_class)) +   geom_sf(color = \"white\", size = 0.1, show.legend = FALSE) +   bi_scale_fill(pal = named_colour_vector, dim = 3) +   labs(     title = \"Race and Income in St. Louis, MO\",     caption = \"Breaks for percent white are 14.0% and 62.0% (range is 0-96.7%).     Breaks for median income are $26,200 and $43,900     (range is $10,500-$74,400).\"   ) +   bi_theme()    # Draw the bivariate legend bivariate_legend <- bi_legend(   pal = named_colour_vector,   dim = 3,   xlab = \"Higher % White \",   ylab = \"Higher Income \",   size = 7 )  # Combine the map and bivariate legend race_income_plot +   inset_element(     bivariate_legend,     left = 0,     bottom = 0.8,     right = 0.5,     top = 1,     align_to = \"plot\"   )"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/compatibility.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Compatibility with other colour packages","text":"palettes supports casting coercion colour vectors, generally compatible colour packages functions accept return colours character vector \"#RRGGBB\" \"#RRGGBBAA\", colour names grDevices::colors(), positive integer indexes grDevices::palette(). vignette shows cast coerce colour vectors select number colour packages. use following colour vector demonstration. approaches also work single colour palettes extracted colour vector using [[ $. See “Subsetting” section vignette(\"palettes\", package = \"palettes\") details.","code":"colour_vector <- pal_colour(   c(\"#a00e00\", \"#d04e00\", \"#f6c200\", \"#0086a8\", \"#132b69\") ) colour_vector #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #F6C200 #> • #0086A8 #> • #132B69"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/compatibility.html","id":"colorspace","dir":"Articles","previous_headings":"","what":"colorspace","title":"Compatibility with other colour packages","text":"turn colour vectors sRGB objects, pass colorspace::hex2RGB(). convert colour matrices different colour space use (). turn colour matrices colour space back colour vectors use colorspace::hex() as_colour().","code":"library(colorspace) colour_matrix <- hex2RGB(colour_vector) colour_matrix #>              R          G         B #> [1,] 0.6274510 0.05490196 0.0000000 #> [2,] 0.8156863 0.30588235 0.0000000 #> [3,] 0.9647059 0.76078431 0.0000000 #> [4,] 0.0000000 0.52549020 0.6588235 #> [5,] 0.0745098 0.16862745 0.4117647 as(colour_matrix, \"HLS\") #>              H         L         S #> [1,]   5.25000 0.3137255 1.0000000 #> [2,]  22.50000 0.4078431 1.0000000 #> [3,]  47.31707 0.4823529 1.0000000 #> [4,] 192.14286 0.3294118 1.0000000 #> [5,] 223.25581 0.2431373 0.6935484 colour_strings <- hex(colour_matrix) colour_strings #> [1] \"#A00E00\" \"#D04E00\" \"#F6C200\" \"#0086A8\" \"#132B69\"  as_colour(colour_strings) #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #F6C200 #> • #0086A8 #> • #132B69"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/compatibility.html","id":"farver","dir":"Articles","previous_headings":"","what":"farver","title":"Compatibility with other colour packages","text":"turn colour vectors standard form expected farver, pass farver::decode_colour(). convert colour matrices different colour space use (). turn colour matrices back colour vectors use farver::encode_colour() as_colour().","code":"library(farver) colour_matrix <- decode_colour(colour_vector) colour_matrix #>        r   g   b #> [1,] 160  14   0 #> [2,] 208  78   0 #> [3,] 246 194   0 #> [4,]   0 134 168 #> [5,]  19  43 105 convert_colour(colour_matrix, \"rgb\", \"lab\") #>             l          a         b #> [1,] 33.54208  54.577757  47.36117 #> [2,] 50.52643  48.846955  60.83188 #> [3,] 80.83906   4.979744  82.46354 #> [4,] 51.69585 -18.094069 -26.58568 #> [5,] 19.58020  15.807937 -38.93437 colour_strings <- encode_colour(colour_matrix) colour_strings #> [1] \"#A00E00\" \"#D04E00\" \"#F6C200\" \"#0086A8\" \"#132B69\"  as_colour(colour_strings) #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #F6C200 #> • #0086A8 #> • #132B69"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/compatibility.html","id":"grdevices","dir":"Articles","previous_headings":"","what":"grDevices","title":"Compatibility with other colour packages","text":"turn colour vectors standard form expected grDevices, pass grDevices::col2rgb(). convert colour matrices different colour space use grDevices::convertColor() transpose colour matrix. turn colour matrices back colour vectors use grDevices::rgb() as_colour().","code":"library(grDevices) colour_matrix <- col2rgb(colour_vector) colour_matrix #>       [,1] [,2] [,3] [,4] [,5] #> red    160  208  246    0   19 #> green   14   78  194  134   43 #> blue     0    0    0  168  105 convertColor(t(colour_matrix), \"sRGB\", \"Lab\") #>             L          a         b #> [1,] 3857.402  4409.9316  3748.578 #> [2,] 5202.266  4205.9589  4814.042 #> [3,] 7730.129   541.3668  6602.094 #> [4,] 5255.133 -1327.5554 -2215.970 #> [5,] 2479.118  1571.4634 -3318.586 colour_strings <- rgb(   r = colour_matrix[1, ], g = colour_matrix[2, ], b = colour_matrix[3, ],   maxColorValue = 255 ) colour_strings #> [1] \"#A00E00\" \"#D04E00\" \"#F6C200\" \"#0086A8\" \"#132B69\"  as_colour(colour_strings) #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #F6C200 #> • #0086A8 #> • #132B69"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"set-up-advice","dir":"Articles","previous_headings":"","what":"Set up advice","title":"Creating a colour palette package","text":"vignette assumes already familiar R package development setup system creating R packages. first time creating R package, book R Packages Hadley Wickham Jenny Bryan gives tools need start, highly recommend using supplement vignette. good way check ready create colour palette package run devtools::dev_sitrep(), prints info development setup. reveals certain tools packages missing --date, encouraged update .","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"attach-devtools","dir":"Articles","previous_headings":"","what":"Attach devtools","title":"Creating a colour palette package","text":"code assumes ’ve attached devtools R session: can initiate new package active R session. don’t need worry whether ’re existing new project . functions use take care .","code":"library(devtools)"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"example-package-sunsets","dir":"Articles","previous_headings":"","what":"Example package: sunsets","title":"Creating a colour palette package","text":"use various functions devtools palettes build small example package scratch. call package sunsets can take peek finished product working towards visiting sunsets GitHub: https://github.com/mccarthy-m-g/sunsets.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"creating-the-package","dir":"Articles","previous_headings":"","what":"Creating the package","title":"Creating a colour palette package","text":"first step create R package set basic structure. many ways accomplish , demonstrate usethis::create_package(): create_package() package drops fresh R session new package, probably need call library(devtools) . can also set open argument FALSE create_package() using session R package created .","code":"create_package(\"~/path/to/sunsets\")"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"adding-package-metadata","dir":"Articles","previous_headings":"Creating the package","what":"Adding package metadata","title":"Creating a colour palette package","text":"point can add important metadata package DESCRIPTION usethis::use_package():","code":"use_description(   fields = list(     Title = \"Sunset Colour Palettes\",     `Authors@R` =        'person(\"First\", \"Last\", , \"first.last@example.com\", c(\"aut\", \"cre\"))',     Description = paste0(       \"Colour palettes inspired by sunsets in the Canadian Prairies. \",       \"Built using the 'palettes' package, which provides methods for \",       \"printing, formatting, casting and coercion, extraction and updating \",       \"of components, plotting, colour mixing arithmetic, and colour \",       \"interpolation.\"     ),     URL = \"https://github.com/user/repo\",     BugReports = \"https://github.com/user/repo/issues\"   ) )"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"choosing-a-license","dir":"Articles","previous_headings":"Creating the package","what":"Choosing a license","title":"Creating a colour palette package","text":"package primarily contain colour palette data, code, recommend choosing Creative Commons license: minimal restrictions choose CC0 license usethis::use_cc0_license() require attribution colour palettes used, choose CC license usethis::use_ccby_license() sunsets choose CC0 license usethis::use_cc0_license():","code":"use_cc0_license()"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"creating-colour-palettes","dir":"Articles","previous_headings":"Creating the package","what":"Creating colour palettes","title":"Creating a colour palette package","text":"Colour palette packages made palettes examples -called “data packages”—exist solely purpose distributing colour palettes created pal_palette(), along documentation. make easy update reproduce colour palettes, first set data-creating script includes code used create usethis::use_data_raw(): sunsets package final script creating colour palettes looks like : demonstrates three important points making colour palettes: Palettes can created manually, “discrete palettes” section Palettes can made programmatically, “sequential palettes” section Multiple palette objects can coerced together, “palettes” section store colour palettes make available users package, save .rda files data/ directory usethis::use_data().","code":"use_data_raw(name = \"sunset_palettes\") library(palettes)  # Discrete palettes ----------------------------------------------------------- sunset_palettes_discrete <- pal_palette(   light = c(\"#dc8951\", \"#4E8AC9\", \"#F5D06D\", \"#69ca97\", \"#c978b5\"),   dark = c(\"#EE6720\", \"#0792C9\", \"#E4B854\", \"#24B079\", \"#9A4F80\") )  plot(sunset_palettes_discrete)  usethis::use_data(sunset_palettes_discrete, overwrite = TRUE)  # Sequential palettes --------------------------------------------------------- sunset_palettes_sequential <- pal_palette(   orange = pal_brewer(pal_colour(c(\"#EE6720\", \"#FBE0D1\")), n = 7),   blue   = pal_brewer(pal_colour(c(\"#0792C9\", \"#C1D1EB\")), n = 7),   yellow = pal_brewer(pal_colour(c(\"#E4B854\", \"#FFECC8\")), n = 7),   green  = pal_brewer(pal_colour(c(\"#24B079\", \"#C9EBD7\")), n = 7),   purple = pal_brewer(pal_colour(c(\"#9A4F80\", \"#ECCCE2\")), n = 7) )  plot(sunset_palettes_sequential)  usethis::use_data(sunset_palettes_sequential, overwrite = TRUE)  # All palettes ---------------------------------------------------------------- sunset_palettes <- c(   sunset_palettes_sequential,   sunset_palettes_discrete )  plot(sunset_palettes)  usethis::use_data(sunset_palettes, overwrite = TRUE)"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"attaching-the-palettes-package","dir":"Articles","previous_headings":"Creating the package","what":"Attaching the palettes package","title":"Creating a colour palette package","text":"colour palettes data/ always effectively exported, can seen running devtools::load_all() running sunset_palettes console. However, make functions palettes available users sunsets, need add palettes dependency attach runtime. can add necessary text DESCRIPTION usethis::use_package(): use Depends instead Imports sunsets designed used conjunction palettes useful without . valid exception general advice always use Imports. Hadley Wickham Jenny Bryan explain R Packages: Unless good reason otherwise, always list packages Imports Depends. ’s good package self-contained, minimises changes global environment (including search path). exception package designed used conjunction another package. example, analogue package builds top vegan. ’s useful without vegan, vegan Depends instead Imports. Similarly, ggplot2 really Depend scales, rather Importing . also need import palettes package’s NAMESPACE methods available sunsets loaded attached (.e., sunsets::my_fun()). import palettes package’s NAMESPACE, create basic package-level documentation script R/ import palettes usethis::use_package_doc(): R/sunsets-package.R write roxygen2 blocks document colour palettes, run devtools::document() ’re finished. sunsets package documentation looks like :","code":"usethis::use_package(\"palettes\", \"Depends\") use_package_doc() #' @keywords internal \"_PACKAGE\"  #' Internal palettes methods #' #' @import palettes #' @keywords internal #' @name sunsets-palettes NULL"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"documenting-colour-palettes","dir":"Articles","previous_headings":"Creating the package","what":"Documenting colour palettes","title":"Creating a colour palette package","text":"colour palettes data/ always effectively exported, still need document . document colour palettes, create script R/ document names colour palettes usethis::use_r(): can name script anything like, suggest “palettes” colour palette documentation single file. R/palettes.R write roxygen2 blocks document colour palettes, run devtools::document() ’re finished. sunsets package documentation looks like :","code":"usethis::use_r(\"palettes\") #' Sunset palettes #' #' Palettes inspired by sunsets in the Canadian Prairies. #' #' @format ## `sunset_palettes` #' An object of class `palettes_palette` with `r length(sunset_palettes)` #' colour palettes. Use `names(sunset_palettes)` to return all palette names. #' @source <https://github.com/mccarthy-m-g/sunsets> #' @author [Michael McCarthy](https://github.com/mccarthy-m-g) #' @seealso [pal_palette()], [pal_colour()] #' @examples #' # Get all palettes by name. #' names(sunset_palettes) #' #' # Plot all palettes. #' plot(sunset_palettes) \"sunset_palettes\"  #' @rdname sunset_palettes #' @format ## `sunset_palettes_discrete` #' An object of class `palettes_palette` with #' `r length(sunset_palettes_discrete)` discrete colour palettes. #'  Use `names(sunset_palettes_discrete)` to return all palette names. \"sunset_palettes_discrete\"  #' @rdname sunset_palettes #' @format ## `sunset_palettes_sequential` #' An object of class `palettes_palette` with #' `r length(sunset_palettes_sequential)` sequential colour palettes. #'  Use `names(sunset_palettes_sequential)` to return all palette names. \"sunset_palettes_sequential\""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"adding-readme-md-and-news-md","dir":"Articles","previous_headings":"Creating the package","what":"Adding README.md and NEWS.md","title":"Creating a colour palette package","text":"now package ready submit CRAN. , update two important documentation files: README.md, describes package NEWS.md, describes ’s changed since previous version See Documentation chapter R Packages Hadley Wickham Jenny Bryan advice writing files. want include printed colour previews colour palettes README.md like palettes’ README.md, need write README.Rmd file uses asciicast knitr engine. working example, refer code palettes’ README.Rmd file. Optionally, might also consider adding vignettes pkgdown website package.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"package-maintenance","dir":"Articles","previous_headings":"","what":"Package maintenance","title":"Creating a colour palette package","text":"colour palette packages made palettes data packages, low maintenance. typically need update changing updating colour palettes. Moreover, new features added palettes, users package can gain access installing new update—need make changes package make available.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/creating-packages.html","id":"distributing-your-package","dir":"Articles","previous_headings":"","what":"Distributing your package","title":"Creating a colour palette package","text":"See Maintenance distribution chapter R Packages Hadley Wickham Jenny Bryan advice distributing package.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/ggplot2.html","id":"colour-scales","dir":"Articles","previous_headings":"","what":"Colour scales","title":"Using palettes with ggplot2","text":"discrete colours use scale_colour_palette_d().  Continuous binned colours can used continuous data. continuous colours use scale_colour_palette_c(). binned colours use scale_colour_palette_b().","code":"ggplot(diamonds[sample(nrow(diamonds), 1000), ], aes(carat, price)) +   geom_point(aes(colour = clarity)) +   scale_colour_palette_d(met_palettes$VanGogh3) hwy_mpg <- ggplot(mpg, aes(displ, hwy, colour = hwy)) +   geom_point()  hwy_mpg + scale_colour_palette_c(met_palettes$Greek)  hwy_mpg + scale_colour_palette_b(met_palettes$Greek)"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/ggplot2.html","id":"fill-scales","dir":"Articles","previous_headings":"","what":"Fill scales","title":"Using palettes with ggplot2","text":"discrete fills use scale_fill_palette_d().  Continuous binned fills can used continuous data. continuous fills use scale_fill_palette_c(). binned fills use scale_fill_palette_b().","code":"ggplot(diamonds, aes(x = price, fill = cut)) +   geom_histogram(position = \"dodge\", binwidth = 1000) +   scale_fill_palette_d(pnw_palettes$Sunset) eruptions <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +   geom_tile()  eruptions + scale_fill_palette_c(viridis_palettes$mako)  eruptions + scale_fill_palette_b(viridis_palettes$mako)"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/ggplot2.html","id":"customizing-scales","dir":"Articles","previous_headings":"","what":"Customizing scales","title":"Using palettes with ggplot2","text":"scale_ functions can pass arguments appropriate scale constructors ggplot2 need control name, limits, breaks, labels, forth colour fill scales. arguments passed ... appropriate scale constructor function: ggplot2::discrete_scale() scale_colour_palette_d() scale_fill_palette_d() ggplot2::continuous_scale() scale_colour_palette_c() scale_fill_palette_c() ggplot2::binned_scale() scale_colour_palette_b() scale_fill_palette_b() particularly useful need change colours mapped values scale. example, common problem working divergent colour palettes getting middle colour palette align fixed value representing mid-point continuous scale. demonstrate, say mean treatment outcome results four groups clinical trial. want plot outcomes diverging bar chart divergent fills. default, fill scale’s mid-point mean four groups, want zero.  can use rescaler argument ggplot2::continuous_scale(), accepts function used scale input values range [0, 1], scale fill values mid-point zero. scaling mid-point use scales::rescale_mid().","code":"treatment_results <- data.frame(   group   = LETTERS[1:4],   outcome = c(-0.5, -1.1, 1.9, 2.3) ) ggplot(treatment_results, aes(x = group, y = outcome, fill = outcome)) +   geom_col() +   scale_fill_palette_c(met_palettes$Benedictus) ggplot(treatment_results, aes(x = group, y = outcome, fill = outcome)) +   geom_col() +   scale_fill_palette_c(     met_palettes$Benedictus,     rescaler = ~ rescale_mid(.x, mid = 0)   )"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/gt.html","id":"preparing-the-table","dir":"Articles","previous_headings":"","what":"Preparing the table","title":"Using palettes with gt","text":"demonstrate use palettes colour data cells gt, use airquality input data table following columns: Year, Month, Day: numeric month day month record Temp: maximum daily air temperature degrees Fahrenheit (°F) Temperature good fit colour—can represent cold blue hot red. First create gt table add colour . table slightly modified table Introduction Creating gt Tables article. looks like .","code":"# Modify the `airquality` dataset by adding the year # of the measurements (1973) and limiting to 10 rows airquality_m <-    airquality %>%   mutate(Year = 1973L) %>%   slice(1:10) %>%    select(Year, Month, Day, Temp)    # Create a display table using the `airquality` # dataset; arrange columns into groups gt_tbl <-    gt(airquality_m) %>%   tab_header(     title = \"New York Temperature Measurements\",     subtitle = \"Daily measurements in New York City (May 1-10, 1973)\"   ) %>%   tab_spanner(     label = \"Time\",     columns = c(Year, Month, Day)   ) %>%   tab_spanner(     label = \"Measurement\",     columns = c(Temp)   ) %>%   cols_label(     Temp = html(\"Temp,<br>&deg;F\")   )  # Show the gt table gt_tbl"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/gt.html","id":"adding-colour","dir":"Articles","previous_headings":"","what":"Adding colour","title":"Using palettes with gt","text":"can use Hiroshige palette blue red gradients, reversing colours correct order example. moment, objects class palettes_palette palettes_colour used directly colour functions gt. work around cast colour vector character vector. Now can use gt::data_color() colour temperature cells. colors argument accepts either vector colours use distinct cell value level colour mapping function (e.g., scales package). pass character vector directly colors argument. works equally well colour mapping functions palettes. colour mapping functions palettes : pal_numeric(), pal_bin(), pal_quantile(), pal_factor(). functions useful need finer control colour evaluation data.","code":"colour_vector <- rev(met_palettes$Hiroshige) colour_vector #> <palettes_colour[10]> #> • #1E466E #> • #376795 #> • #528FAD #> • #72BCD5 #> • #AADCE0 #> • #FFE6B7 #> • #FFD06F #> • #F7AA58 #> • #EF8A47 #> • #E76254 character_vector <- as.character(colour_vector) character_vector #>  [1] \"#1e466e\" \"#376795\" \"#528fad\" \"#72bcd5\" \"#aadce0\" \"#ffe6b7\" \"#ffd06f\" #>  [8] \"#f7aa58\" \"#ef8a47\" \"#e76254\" gt_tbl %>%    data_color(     columns = Temp,     colors  = character_vector   ) gt_tbl %>%    data_color(     columns = Temp,     colors  = pal_numeric(colour_vector, domain = NULL)   )"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/palettes.html","id":"creating","dir":"Articles","previous_headings":"","what":"Creating","title":"palettes","text":"pal_colour() nice way create colour vector. Colours can character vector \"#RRGGBB\" \"#RRGGBBAA\", colour names grDevices::colors(), positive integer indexes grDevices::palette(). Colour vectors always printed hex codes colour previews. pal_palette() nice way create named colour palettes.","code":"colour_vector <- pal_colour(   c(\"#a00e00\", \"#d04e00\", \"#f6c200\", \"#0086a8\", \"#132b69\") )  colour_vector #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #F6C200 #> • #0086A8 #> • #132B69 colour_palette <- pal_palette(   egypt = c(\"#dd5129\", \"#0f7ba2\", \"#43b284\", \"#fab255\"),   java  = c(\"#663171\", \"#cf3a36\", \"#ea7428\", \"#e2998a\", \"#0c7156\") )  colour_palette #> <palettes_palette[2]> #> $egypt #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255 #>  #> $java #> <palettes_colour[5]> #> • #663171 #> • #CF3A36 #> • #EA7428 #> • #E2998A #> • #0C7156"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/palettes.html","id":"casting-and-coercion","dir":"Articles","previous_headings":"","what":"Casting and coercion","title":"palettes","text":"compliment pal_colour(), palettes provides as_colour() cast objects colour vectors. compliment pal_palette(), palettes provides as_palette() cast objects colour palettes. Colour vectors colour palettes can also coerced tibble as_tibble(). See vignette(\"tibble\", package = \"tibble\") overview tibbles.","code":"colour_strings <- c(\"orange\", \"purple\") as_colour(colour_strings) #> <palettes_colour[2]> #> • #FFA500 #> • #A020F0 colour_list <- list(OrPu = c(\"orange\", \"purple\")) as_palette(colour_list) #> <palettes_palette[1]> #> $OrPu #> <palettes_colour[2]> #> • #FFA500 #> • #A020F0 as_tibble(colour_vector) #> # A tibble: 5 × 1 #>   colour    #>   <colour>  #> 1 • #A00E00 #> 2 • #D04E00 #> 3 • #F6C200 #> 4 • #0086A8 #> 5 • #132B69  as_tibble(colour_palette) #> # A tibble: 9 × 2 #>   palette colour    #>   <chr>   <colour>  #> 1 egypt   • #DD5129 #> 2 egypt   • #0F7BA2 #> 3 egypt   • #43B284 #> 4 egypt   • #FAB255 #> 5 java    • #663171 #> 6 java    • #CF3A36 #> 7 java    • #EA7428 #> 8 java    • #E2998A #> 9 java    • #0C7156"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/palettes.html","id":"subsetting","dir":"Articles","previous_headings":"","what":"Subsetting","title":"palettes","text":"Colour vectors can subset using [. extract one colours use positive integers: drop one colours use negative integers: move one colours extract, drop, combine: Colour palettes can subset using [, [[, $. extract one colour palettes use [: extract single colour palette colour vector use [[ $: get names colour palettes use names():","code":"colour_vector[3] #> <palettes_colour[1]> #> • #F6C200 colour_vector[-3] #> <palettes_colour[4]> #> • #A00E00 #> • #D04E00 #> • #0086A8 #> • #132B69 c(colour_vector[-3], colour_vector[3]) #> <palettes_colour[5]> #> • #A00E00 #> • #D04E00 #> • #0086A8 #> • #132B69 #> • #F6C200 colour_palette[\"egypt\"] #> <palettes_palette[1]> #> $egypt #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255 colour_palette[[\"egypt\"]] #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255  colour_palette$egypt #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255 names(colour_palette) #> [1] \"egypt\" \"java\""},{"path":"https://mccarthy-m-g.github.io/palettes/articles/palettes.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"palettes","text":"plot() nice way showcase colour vectors colour palettes. appearance plot depends input. Colour vectors plotted swatches:  Single colour palettes plotted swatches palette name overlay:  Multiple colour palettes plotted faceted swatches palette name titles:  interpolate change direction colours plot, use optional n, direction, space, interpolate arguments.  plots ggplot2 objects can customized using standard ggplot2 methods. See ggplot2 customizing FAQ common examples.","code":"plot(colour_vector) plot(colour_palette[\"egypt\"]) plot(colour_palette) plot(colour_vector, n = 7, direction = -1, interpolate = \"linear\")"},{"path":"https://mccarthy-m-g.github.io/palettes/articles/palettes.html","id":"mixing","dir":"Articles","previous_headings":"","what":"Mixing","title":"palettes","text":"Colour vectors can mixed create new colours. mix colours additive space use +: Subtractive mixing - supported future version.","code":"pal_colour(\"red\") + pal_colour(\"blue\") #> <palettes_colour[1]> #> • #FF00FF"},{"path":"https://mccarthy-m-g.github.io/palettes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael McCarthy. Author, maintainer, copyright holder.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McCarthy M (2022). palettes: Methods Colour Vectors Colour Palettes. https://mccarthy-m-g.github.io/palettes/, https://github.com/mccarthy-m-g/palettes.","code":"@Manual{,   title = {palettes: Methods for Colour Vectors and Colour Palettes},   author = {Michael McCarthy},   year = {2022},   note = {https://mccarthy-m-g.github.io/palettes/, https://github.com/mccarthy-m-g/palettes}, }"},{"path":"https://mccarthy-m-g.github.io/palettes/index.html","id":"palettes-","dir":"","previous_headings":"","what":"Methods for Colour Vectors and Colour Palettes","title":"Methods for Colour Vectors and Colour Palettes","text":"palettes R package working colour palettes. goal palettes provide methods working colour palettes, particularly developers want make colour palette package. early development.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Methods for Colour Vectors and Colour Palettes","text":"Install development version GitHub R-universe :","code":"# Install from GitHub # install.packages(\"remotes\") remotes::install_github(\"mccarthy-m-g/palettes\")  # Install from R-universe install.packages('palettes', repos = 'https://mccarthy-m-g.r-universe.dev')"},{"path":"https://mccarthy-m-g.github.io/palettes/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Methods for Colour Vectors and Colour Palettes","text":"Colours can specified name (listed grDevices::colours()):  hex code:  Multiple colours can specified character vector:  Named colour palettes can specified way:  Colours also work tibbles:","code":"library(tibble) library(palettes) pal_colour(\"red\") pal_colour(\"#FF0000\") pal_colour(c(\"#FF0000\", \"blue\", \"green\")) pal_palette(   palette_1 = c(\"#FF0000\", \"blue\", \"green\"),   palette_2 = c(c(\"yellow\", \"orange\", \"purple\")) ) tibble(   colours = pal_colour(c(\"#FF0000\", \"blue\", \"green\")) )"},{"path":"https://mccarthy-m-g.github.io/palettes/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Methods for Colour Vectors and Colour Palettes","text":"See https://mccarthy-m-g.github.io/palettes/ also installed package: help(package = \"palettes\").","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Methods for Colour Vectors and Colour Palettes","text":"MIT © Michael McCarthy","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/as_tibble.palettes_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","title":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","text":"as_tibble() turns existing colour vector colour palette -called tibble, data frame class tbl_df.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/as_tibble.palettes_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","text":"","code":"# S3 method for palettes_colour as_tibble(x, ...)  # S3 method for palettes_palette as_tibble(x, ...)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/as_tibble.palettes_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","text":"x object class palettes_palette palettes_colour. ... used.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/as_tibble.palettes_colour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","text":"tibble.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/as_tibble.palettes_colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast colour vectors and colour palettes to tibbles — as_tibble.palettes_colour","text":"","code":"x <- pal_colour(c(\"#663171\", \"#EA7428\", \"#0C7156\")) as_tibble(x) #> # A tibble: 3 × 1 #>   colour    #>   <colour>  #> 1 • #663171 #> 2 • #EA7428 #> 3 • #0C7156  y <- pal_palette(   Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\"),   Java  = c(\"#663171\", \"#CF3A36\", \"#EA7428\", \"#E2998A\", \"#0C7156\") ) as_tibble(y) #> # A tibble: 9 × 2 #>   palette colour    #>   <chr>   <colour>  #> 1 Egypt   • #DD5129 #> 2 Egypt   • #0F7BA2 #> 3 Egypt   • #43B284 #> 4 Egypt   • #FAB255 #> 5 Java    • #663171 #> 6 Java    • #CF3A36 #> 7 Java    • #EA7428 #> 8 Java    • #E2998A #> 9 Java    • #0C7156"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","title":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","text":"binary operators mix colour vectors arithmetic operators.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","text":"","code":"# S3 method for palettes_colour +(e1, e2)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","text":"e1, e2 Colour vectors class palettes_colour.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","text":"binary operators return colour vectors class palettes_colour containing result element element operations. involving zero-length vector result length zero. Otherwise, elements shorter vectors recycled necessary. + operator additive colour mixing.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mix colour vectors with arithmetic operators — colour-mixing-arithmetic","text":"","code":"x <- pal_colour(\"red\") y <- pal_colour(\"blue\") x + y #> <palettes_colour[1]> #> • #FF00FF"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-math.html","id":null,"dir":"Reference","previous_headings":"","what":"Mix colour vectors with math functions — colour-mixing-math","title":"Mix colour vectors with math functions — colour-mixing-math","text":"functions mix colour vectors math functions.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-math.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mix colour vectors with math functions — colour-mixing-math","text":"","code":"# S3 method for palettes_colour sum(..., na.rm = FALSE)  # S3 method for palettes_colour cumsum(x)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-math.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mix colour vectors with math functions — colour-mixing-math","text":"... Colour vectors class palettes_colour. na.rm Whether include missing values. Either TRUE FALSE. x object class palettes_colour.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-math.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mix colour vectors with math functions — colour-mixing-math","text":"functions return colour vectors class palettes_colour: sum() returns sum colours present arguments additive colour mixing. cumsum() returns vector whose elements cumulative sums elements argument additive colour mixing.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/colour-mixing-math.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mix colour vectors with math functions — colour-mixing-math","text":"","code":"x <- pal_colour(c(\"red\", \"blue\")) sum(x) #> <palettes_colour[1]> #> • #FF00FF  x <- pal_colour(c(\"red\", \"blue\", \"yellow\")) cumsum(x) #> <palettes_colour[3]> #> • #FF0000 #> • #FF00FF #> • #FFFFFF"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Metropolitan Museum of Art palettes — met_palettes","title":"Metropolitan Museum of Art palettes — met_palettes","text":"Palettes inspired works Metropolitan Museum Art New York. Pieces selected come various time periods, regions, mediums.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metropolitan Museum of Art palettes — met_palettes","text":"","code":"met_palettes  met_palettes_a11y"},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"met-palettes","dir":"Reference","previous_headings":"","what":"met_palettes","title":"Metropolitan Museum of Art palettes — met_palettes","text":"object class palettes_palette 56 colour palettes. Use names(met_palettes) return palette names.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"met-palettes-a-y","dir":"Reference","previous_headings":"","what":"met_palettes_a11y","title":"Metropolitan Museum of Art palettes — met_palettes","text":"object class palettes_palette limited 24 colourblind accessible palettes. colours palette distinguishible deuteranopia, protanopia, tritanopia. Use names(met_palettes_a11y) return palette names.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Metropolitan Museum of Art palettes — met_palettes","text":"https://github.com/BlakeRMills/MetBrewer","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metropolitan Museum of Art palettes — met_palettes","text":"Blake Robert Mills","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/met_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metropolitan Museum of Art palettes — met_palettes","text":"","code":"# Get all palettes by name. names(met_palettes) #>  [1] \"Archambault\" \"Austria\"     \"Benedictus\"  \"Cassatt1\"    \"Cassatt2\"    #>  [6] \"Cross\"       \"Degas\"       \"Demuth\"      \"Derain\"      \"Egypt\"       #> [11] \"Gauguin\"     \"Greek\"       \"Hiroshige\"   \"Hokusai1\"    \"Hokusai2\"    #> [16] \"Hokusai3\"    \"Homer1\"      \"Homer2\"      \"Ingres\"      \"Isfahan1\"    #> [21] \"Isfahan2\"    \"Java\"        \"Johnson\"     \"Juarez\"      \"Kandinsky\"   #> [26] \"Klimt\"       \"Lakota\"      \"Manet\"       \"Monet\"       \"Moreau\"      #> [31] \"Morgenstern\" \"Nattier\"     \"Navajo\"      \"NewKingdom\"  \"Nizami\"      #> [36] \"OKeeffe1\"    \"OKeeffe2\"    \"Paquin\"      \"Peru1\"       \"Peru2\"       #> [41] \"Pillement\"   \"Pissaro\"     \"Redon\"       \"Renoir\"      \"Signac\"      #> [46] \"Tam\"         \"Tara\"        \"Thomas\"      \"Tiepolo\"     \"Troy\"        #> [51] \"Tsimshian\"   \"VanGogh1\"    \"VanGogh2\"    \"VanGogh3\"    \"Veronese\"    #> [56] \"Wissing\"      # Plot all palettes. plot(met_palettes)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Nord palettes — nord_palettes","title":"Nord palettes — nord_palettes","text":"Dimmed pastel palettes inspired Arctic Canadian wilderness.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nord palettes — nord_palettes","text":"","code":"nord_palettes"},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":"nord-palettes","dir":"Reference","previous_headings":"","what":"nord_palettes","title":"Nord palettes — nord_palettes","text":"object class palettes_palette 16 colour palettes. Use names(nord_palettes) return palette names.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Nord palettes — nord_palettes","text":"https://github.com/jkaupp/nord","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Nord palettes — nord_palettes","text":"Jake Kaupp","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/nord_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nord palettes — nord_palettes","text":"","code":"# Get all palettes by name. names(nord_palettes) #>  [1] \"polarnight\"       \"snowstorm\"        \"frost\"            \"aurora\"           #>  [5] \"lumina\"           \"mountain_forms\"   \"silver_mine\"      \"lake_superior\"    #>  [9] \"victory_bonds\"    \"halifax_harbor\"   \"moose_pond\"       \"algoma_forest\"    #> [13] \"rocky_mountain\"   \"red_mountain\"     \"baie_mouton\"      \"afternoon_prarie\"  # Plot all palettes. plot(nord_palettes)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour vectors — pal_colour","title":"Colour vectors — pal_colour","text":"creates character vector represents colours printed, colours formatted hexadecimal strings.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour vectors — pal_colour","text":"","code":"pal_colour(x = character())  is_colour(x)  as_colour(x)  # S3 method for default as_colour(x)  # S3 method for palettes_palette as_colour(x)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour vectors — pal_colour","text":"x pal_colour(): character vector three kinds R colour specifications. as_colour(): object coerced. is_colour(): object test.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colour vectors — pal_colour","text":"S3 vector class palettes_colour.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colour vectors — pal_colour","text":"Colours can specified using either: Hexadecimal strings form \"#RRGGBB\" \"#RRGGBBAA\" Colour names grDevices::colors() Positive integers index grDevices::palette()[]","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour vectors — pal_colour","text":"","code":"pal_colour(c(\"darkred\", \"#0F7BA2\")) #> <palettes_colour[2]> #> • #8B0000 #> • #0F7BA2  is_colour(\"darkred\") #> [1] FALSE is_colour(pal_colour(\"darkred\")) #> [1] TRUE  as_colour(\"#0F7BA2\") #> <palettes_colour[1]> #> • #0F7BA2"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour vector and colour palette mapping — pal_numeric","title":"Colour vector and colour palette mapping — pal_numeric","text":"Conveniently maps data values (numeric factor/character) colours according given colour vector colour palette.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour vector and colour palette mapping — pal_numeric","text":"","code":"pal_numeric(   palette,   domain,   na.color = \"#808080\",   alpha = FALSE,   reverse = FALSE )  pal_bin(   palette,   domain,   bins = 7,   pretty = TRUE,   na.color = \"#808080\",   alpha = FALSE,   reverse = FALSE,   right = FALSE )  pal_quantile(   palette,   domain,   n = 4,   probs = seq(0, 1, length.out = n + 1),   na.color = \"#808080\",   alpha = FALSE,   reverse = FALSE,   right = FALSE )  pal_factor(   palette,   domain,   levels = NULL,   ordered = FALSE,   na.color = \"#808080\",   alpha = FALSE,   reverse = FALSE )"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour vector and colour palette mapping — pal_numeric","text":"palette object class palettes_palette palettes_colour. domain possible values can mapped. pal_numeric pal_bin, can simple numeric range (e.g. c(0, 100)); pal_quantile needs representative numeric data; pal_factor needs categorical data. NULL, whenever resulting colour function called, x value represent domain. implies function invoked multiple times, encoding values colours may consistent; consistency needed, must provide non-NULL domain. na.color colour return NA values. Note na.color = NA valid. alpha Whether alpha channels respected ignored. TRUE colors without explicit alpha information treated fully opaque. reverse Whether colours palette used reverse order. example, default order palette goes blue green, reverse = TRUE result colors going green blue. bins Either numeric vector two unique cut points single number (greater equal 2) giving number intervals domain values cut. pretty Whether use function pretty() generate bins argument bins single number. pretty = TRUE, actual number bins may number bins specified. pretty = FALSE, seq() used generate bins breaks may \"pretty\". right parameter supplied base::cut(). See Details n Number equal-size quantiles desired. precise control, use probs argument instead. probs See stats::quantile(). provided, n argument ignored. levels alternate way specifying levels; specified, domain ignored ordered TRUE domain needs coerced factor, treat already correct order","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colour vector and colour palette mapping — pal_numeric","text":"function takes single parameter x; called vector numbers (except pal_factor, expects factors/characters), #RRGGBB colour strings returned (unless alpha = TRUE case #RRGGBBAA may also possible).","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colour vector and colour palette mapping — pal_numeric","text":"pal_numeric simple linear mapping continuous numeric data interpolated palette. pal_bin also maps continuous numeric data, performs binning based value (see base::cut() function). pal_bin defaults cut function include.lowest = TRUE right = FALSE. pal_quantile similarly bins numeric data, via stats::quantile() function. pal_factor maps factors colours. palette discrete different number colours number factors, interpolation used.","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour vector and colour palette mapping — pal_numeric","text":"","code":"pal <- pal_bin(met_palettes$Tam, domain = 0:100) plot(as_colour(pal(sort(runif(16, 0, 100)))))   # Exponential distribution, mapped continuously pal <- pal_numeric(met_palettes$Tam, domain = NULL) plot(as_colour(pal(sort(rexp(16)))))   # Exponential distribution, mapped by interval pal <- pal_bin(met_palettes$Tam, domain = NULL, bins = 4) plot(as_colour(pal(sort(rexp(16)))))   # Exponential distribution, mapped by quantile pal <- pal_quantile(met_palettes$Tam, domain = NULL) plot(as_colour(pal(sort(rexp(16)))))   # Categorical data; by default, the values being coloured span the gamut... pal <- pal_factor(met_palettes$Java, domain = NULL) plot(as_colour(pal(LETTERS[1:5])))   # ...unless the data is a factor, without droplevels... pal <- pal_factor(met_palettes$Java, domain = NULL) plot(as_colour(pal(factor(LETTERS[1:5], levels = LETTERS))))   # ...or the domain is stated explicitly. pal <- pal_factor(met_palettes$Java, domain = NULL, levels = LETTERS) plot(as_colour(pal(LETTERS[1:5])))"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour palettes — pal_palette","title":"Colour palettes — pal_palette","text":"creates list colour vectors.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour palettes — pal_palette","text":"","code":"pal_palette(...)  is_palette(x)  as_palette(x)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour palettes — pal_palette","text":"... pal_palette(): named list character vectors three kinds R colour specifications, named list colour vectors class palettes_colour. x as_palette(): object coerced. is_palette(): object test.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colour palettes — pal_palette","text":"S3 list class palettes_palette.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colour palettes — pal_palette","text":"Colours can specified using either: Hexadecimal strings form \"#RRGGBB\" \"#RRGGBBAA\" Colour names grDevices::colors() Positive integers index grDevices::palette()[]","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour palettes — pal_palette","text":"","code":"pal_palette(   Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\"),   Java  = c(\"#663171\", \"#CF3A36\", \"#EA7428\", \"#E2998A\", \"#0C7156\") ) #> <palettes_palette[2]> #> $Egypt #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255 #>  #> $Java #> <palettes_colour[5]> #> • #663171 #> • #CF3A36 #> • #EA7428 #> • #E2998A #> • #0C7156 #>   x <- list(   Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\"),   Java  = c(\"#663171\", \"#CF3A36\", \"#EA7428\", \"#E2998A\", \"#0C7156\") ) as_palette(x) #> <palettes_palette[2]> #> $Egypt #> <palettes_colour[4]> #> • #DD5129 #> • #0F7BA2 #> • #43B284 #> • #FAB255 #>  #> $Java #> <palettes_colour[5]> #> • #663171 #> • #CF3A36 #> • #EA7428 #> • #E2998A #> • #0C7156 #>"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_ramp.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour vector and colour palette interpolation — pal_ramp","title":"Colour vector and colour palette interpolation — pal_ramp","text":"Interpolate set colours palettes_palette palettes_colour objects create new colour palettes.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_ramp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour vector and colour palette interpolation — pal_ramp","text":"","code":"pal_ramp(   palette,   n = NULL,   direction = 1,   space = \"lab\",   interpolate = c(\"linear\", \"spline\") )  # S3 method for palettes_colour pal_ramp(   palette,   n = NULL,   direction = 1,   space = \"lab\",   interpolate = c(\"linear\", \"spline\") )  # S3 method for palettes_palette pal_ramp(   palette,   n = NULL,   direction = 1,   space = \"lab\",   interpolate = c(\"linear\", \"spline\") )"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_ramp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour vector and colour palette interpolation — pal_ramp","text":"palette object class palettes_palette palettes_colour. n integer specifying number colours return. direction Sets order colours scale. 1, default, colours ordered first last. -1, order colours reversed. space colour space interpolate . One : \"cmy\", \"hsl\", \"hsb\", \"hsv\", \"lab\" (CIE L*ab), \"hunterlab\" (Hunter Lab), \"oklab\", \"lch\" (CIE Lch(ab) / polarLAB), \"luv\", \"rgb\" (sRGB), \"xyz\", \"yxy\" (CIE xyY), \"hcl\" (CIE Lch(uv) / polarLuv), \"oklch\" (Polar form oklab). interpolate interpolation method. Either \"linear\" (default) \"spline\".","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_ramp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colour vector and colour palette interpolation — pal_ramp","text":"object class palettes_palette palettes_colour.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pal_ramp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour vector and colour palette interpolation — pal_ramp","text":"","code":"# The class returned after interpolation matches the input class. x <- pal_colour(c(\"darkslateblue\", \"cornflowerblue\", \"slategray1\")) y <- pal_palette(blues = x) class(pal_ramp(x)) #> [1] \"palettes_colour\" \"vctrs_vctr\"      class(pal_ramp(y)) #> [1] \"palettes_palette\" \"vctrs_list_of\"    \"vctrs_vctr\"       \"list\"              # Choose between linear and spline interpolation. pal_ramp(x, n = 7, interpolate = \"linear\") #> <palettes_colour[7]> #> • #483D8B #> • #535AAB #> • #5C77CB #> • #6495ED #> • #89AEF3 #> • #A9C8F9 #> • #C6E2FF pal_ramp(x, n = 7, interpolate = \"spline\") #> <palettes_colour[7]> #> • #483D8B #> • #495CB3 #> • #5179D4 #> • #6495ED #> • #80B0FD #> • #A2CAFF #> • #C6E2FF  # Palettes will have the same length after interpolation, regardless of the # number of colours in the original palette. z <- pal_palette(   Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\"),   Java  = c(\"#663171\", \"#CF3A36\", \"#EA7428\", \"#E2998A\", \"#0C7156\") ) pal_ramp(z, n = 5) #> <palettes_palette[2]> #> $Egypt #> <palettes_colour[5]> #> • #DD5129 #> • #737484 #> • #369694 #> • #83B479 #> • #FAB255 #>  #> $Java #> <palettes_colour[5]> #> • #663171 #> • #CF3A36 #> • #EA7428 #> • #E2998A #> • #0C7156 #>"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/palettes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"palettes: Methods for Colour Vectors and Colour Palettes — palettes-package","title":"palettes: Methods for Colour Vectors and Colour Palettes — palettes-package","text":"Provides comprehensive library colour vectors colour palettes using new family colour classes (palettes_colour, palettes_palette) always print hex codes colour previews. Capabilities include: formatting, casting coercion, extraction updating components, plotting, colour mixing arithmetic, colour interpolation.","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/palettes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"palettes: Methods for Colour Vectors and Colour Palettes — palettes-package","text":"Maintainer: Michael McCarthy m.mccarthy1624@gmail.com [copyright holder]","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/palettes-rlang.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal rlang methods — palettes-rlang","title":"Internal rlang methods — palettes-rlang","text":"Internal rlang methods","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/palettes-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — palettes-vctrs","title":"Internal vctrs methods — palettes-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/plot.palettes_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot colour vectors and colour palettes — plot.palettes_colour","title":"Plot colour vectors and colour palettes — plot.palettes_colour","text":"Plots colour palette object.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/plot.palettes_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot colour vectors and colour palettes — plot.palettes_colour","text":"","code":"# S3 method for palettes_colour plot(   x,   n = NULL,   direction = 1,   space = \"lab\",   interpolate = c(\"linear\", \"spline\"),   ... )  # S3 method for palettes_palette plot(   x,   n = NULL,   direction = 1,   space = \"lab\",   interpolate = c(\"linear\", \"spline\"),   ... )"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/plot.palettes_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot colour vectors and colour palettes — plot.palettes_colour","text":"x object class palettes_palette palettes_colour. n integer specifying number colours return. direction Sets order colours scale. 1, default, colours ordered first last. -1, order colours reversed. space colour space interpolate . One : \"cmy\", \"hsl\", \"hsb\", \"hsv\", \"lab\" (CIE L*ab), \"hunterlab\" (Hunter Lab), \"oklab\", \"lch\" (CIE Lch(ab) / polarLAB), \"luv\", \"rgb\" (sRGB), \"xyz\", \"yxy\" (CIE xyY), \"hcl\" (CIE Lch(uv) / polarLuv), \"oklch\" (Polar form oklab). interpolate interpolation method. Either \"linear\" (default) \"spline\". ... used.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/plot.palettes_colour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot colour vectors and colour palettes — plot.palettes_colour","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/plot.palettes_colour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot colour vectors and colour palettes — plot.palettes_colour","text":"","code":"# Objects of class `palettes_colour` are plotted as swatches. x <- pal_colour(c(\"darkslateblue\", \"cornflowerblue\", \"slategray1\")) plot(x)   # Objects of class `palettes_palette` with one palette are plotted with # the palette name spanned across the swatches. y <- pal_palette(Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\")) plot(y)   # Objects of class `palettes_palette` with multiple palettes are faceted. z <- pal_palette(   Egypt = c(\"#DD5129\", \"#0F7BA2\", \"#43B284\", \"#FAB255\"),   Java  = c(\"#663171\", \"#CF3A36\", \"#EA7428\", \"#E2998A\", \"#0C7156\") ) plot(z)   # Colours can also be interpolated. plot(x, n = 5)  plot(y, n = 5)  plot(z, n = 5)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Pacific Northwest palettes — pnw_palettes","title":"Pacific Northwest palettes — pnw_palettes","text":"Palettes inspired Jake Lawlor's photos dreamiest, colourful, PNW-iest places Washington State.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pacific Northwest palettes — pnw_palettes","text":"","code":"pnw_palettes"},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":"pnw-palettes","dir":"Reference","previous_headings":"","what":"pnw_palettes","title":"Pacific Northwest palettes — pnw_palettes","text":"object class palettes_palette 14 colour palettes. Use names(pnw_palettes) return palette names.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pacific Northwest palettes — pnw_palettes","text":"https://github.com/jakelawlor/PNWColors","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pacific Northwest palettes — pnw_palettes","text":"Jake Lawlor","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/pnw_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pacific Northwest palettes — pnw_palettes","text":"","code":"# Get all palettes by name. names(pnw_palettes) #>  [1] \"Starfish\" \"Shuksan\"  \"Bay\"      \"Winter\"   \"Lake\"     \"Sunset\"   #>  [7] \"Shuksan2\" \"Cascades\" \"Sailboat\" \"Moth\"     \"Spring\"   \"Mushroom\" #> [13] \"Sunset2\"  \"Anemone\"   # Plot all palettes. plot(pnw_palettes)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tibble as_tibble","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/scale_colour_palette_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour scales from colour vectors and colour palettes — scale_colour_palette_d","title":"Colour scales from colour vectors and colour palettes — scale_colour_palette_d","text":"Colour scales colour vectors colour palettes","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/scale_colour_palette_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour scales from colour vectors and colour palettes — scale_colour_palette_d","text":"","code":"scale_colour_palette_d(palette, direction = 1, ...)  scale_fill_palette_d(palette, direction = 1, ...)  scale_colour_palette_c(palette, direction = 1, ...)  scale_fill_palette_c(palette, direction = 1, ...)  scale_colour_palette_b(palette, direction = 1, ...)  scale_fill_palette_b(palette, direction = 1, ...)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/scale_colour_palette_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour scales from colour vectors and colour palettes — scale_colour_palette_d","text":"palette object class palettes_palette palettes_colour. direction Sets order colours scale. 1, default, colours ordered first last. -1, order colours reversed. ... arguments passed ggplot2::discrete_scale(), ggplot2::continuous_scale(), ggplot2::binned_scale() control name, limits, breaks, labels forth.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/scale_colour_palette_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour scales from colour vectors and colour palettes — scale_colour_palette_d","text":"","code":"library(ggplot2)  # Use palette_d with discrete data discrete_pal <- pal_colour(c(\"#663171\", \"#EA7428\", \"#0C7156\")) ggplot(mtcars, aes(wt, mpg, colour = as.factor(cyl))) +   geom_point(size = 3) +   scale_colour_palette_d(discrete_pal)   # Use palette_c with continuous data continuous_pal <- pal_colour(c(\"#3C0D03\", \"#E67424\", \"#F5C34D\")) ggplot(mtcars, aes(wt, mpg, colour = mpg)) +   geom_point(size = 3) +   scale_colour_palette_c(continuous_pal)   # Use palette_b to bin continuous data before mapping ggplot(mtcars, aes(wt, mpg, colour = mpg)) +   geom_point(size = 3) +   scale_colour_palette_b(continuous_pal)"},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Viridis palettes — viridis_palettes","title":"Viridis palettes — viridis_palettes","text":"Colourblind accessible palettes perceptually uniform colour black--white.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Viridis palettes — viridis_palettes","text":"","code":"viridis_palettes"},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":"viridis-palettes","dir":"Reference","previous_headings":"","what":"viridis_palettes","title":"Viridis palettes — viridis_palettes","text":"object class palettes_palette 8 colour palettes. colours palette distinguishible deuteranopia, protanopia, tritanopia. Use names(viridis_palettes) return palette names.","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Viridis palettes — viridis_palettes","text":"https://github.com/sjmgarnier/viridisLite","code":""},{"path":[]},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Viridis palettes — viridis_palettes","text":"Simon Garnier","code":""},{"path":"https://mccarthy-m-g.github.io/palettes/reference/viridis_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Viridis palettes — viridis_palettes","text":"","code":"# Get all palettes by name. names(viridis_palettes) #> [1] \"viridis\" \"magma\"   \"inferno\" \"plasma\"  \"cividis\" \"rocket\"  \"mako\"    #> [8] \"turbo\"    # Plot all palettes. plot(viridis_palettes, n = 256)"},{"path":"https://mccarthy-m-g.github.io/palettes/news/index.html","id":"palettes-0009000","dir":"Changelog","previous_headings":"","what":"palettes 0.0.0.9000","title":"palettes 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
